// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.

package builder

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/bingcool/gen"
	"github.com/bingcool/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bingcool/gofy/app/entity"
)

func newCronTaskLog(db *gorm.DB, opts ...gen.DOOption) cronTaskLog {
	_cronTaskLog := cronTaskLog{}

	_cronTaskLog.cronTaskLogDo.UseDB(db, opts...)
	_cronTaskLog.cronTaskLogDo.UseModel(&entity.CronTaskLog{})

	tableName := _cronTaskLog.cronTaskLogDo.TableName()
	_cronTaskLog.ALL = field.NewAsterisk(tableName)
	_cronTaskLog.ID = field.NewInt64(tableName, "id")
	_cronTaskLog.CronID = field.NewInt64(tableName, "cron_id")
	_cronTaskLog.ExecBatchID = field.NewString(tableName, "exec_batch_id")
	_cronTaskLog.Pid = field.NewInt32(tableName, "pid")
	_cronTaskLog.TaskItem = field.NewString(tableName, "task_item")
	_cronTaskLog.Message = field.NewString(tableName, "message")
	_cronTaskLog.CreatedAt = field.NewTime(tableName, "created_at")
	_cronTaskLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cronTaskLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_cronTaskLog.fillFieldMap()

	return _cronTaskLog
}

// cronTaskLog 定时任务表运行态日志
type cronTaskLog struct {
	cronTaskLogDo cronTaskLogDo

	ALL         field.Asterisk
	ID          field.Int64
	CronID      field.Int64  // 关联的cron_task_id
	ExecBatchID field.String // 每轮执行的批次id
	Pid         field.Int32  // 定时脚本执行时的进程pid
	TaskItem    field.String // 执行任务项meta信息
	Message     field.String // 运行态记录信息
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 修改时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (c cronTaskLog) Table(newTableName string) *cronTaskLog {
	c.cronTaskLogDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cronTaskLog) As(alias string) *cronTaskLog {
	c.cronTaskLogDo.DO = *(c.cronTaskLogDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cronTaskLog) updateTableName(table string) *cronTaskLog {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CronID = field.NewInt64(table, "cron_id")
	c.ExecBatchID = field.NewString(table, "exec_batch_id")
	c.Pid = field.NewInt32(table, "pid")
	c.TaskItem = field.NewString(table, "task_item")
	c.Message = field.NewString(table, "message")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cronTaskLog) WithContext(ctx context.Context) *cronTaskLogDo {
	return c.cronTaskLogDo.WithContext(ctx)
}

func (c cronTaskLog) TableName() string { return c.cronTaskLogDo.TableName() }

func (c cronTaskLog) Alias() string { return c.cronTaskLogDo.Alias() }

func (c cronTaskLog) Columns(cols ...field.Expr) gen.Columns { return c.cronTaskLogDo.Columns(cols...) }

func (c *cronTaskLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cronTaskLog) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["cron_id"] = c.CronID
	c.fieldMap["exec_batch_id"] = c.ExecBatchID
	c.fieldMap["pid"] = c.Pid
	c.fieldMap["task_item"] = c.TaskItem
	c.fieldMap["message"] = c.Message
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cronTaskLog) clone(db *gorm.DB) cronTaskLog {
	c.cronTaskLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cronTaskLog) replaceDB(db *gorm.DB) cronTaskLog {
	c.cronTaskLogDo.ReplaceDB(db)
	return c
}

type cronTaskLogDo struct{ gen.DO }

func (c cronTaskLogDo) Debug() *cronTaskLogDo {
	return c.withDO(c.DO.Debug())
}

func (c cronTaskLogDo) WithContext(ctx context.Context) *cronTaskLogDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cronTaskLogDo) ReadDB() *cronTaskLogDo {
	return c.Clauses(dbresolver.Read)
}

func (c cronTaskLogDo) WriteDB() *cronTaskLogDo {
	return c.Clauses(dbresolver.Write)
}

func (c cronTaskLogDo) Session(config *gorm.Session) *cronTaskLogDo {
	return c.withDO(c.DO.Session(config))
}

func (c cronTaskLogDo) Clauses(conds ...clause.Expression) *cronTaskLogDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cronTaskLogDo) Returning(value interface{}, columns ...string) *cronTaskLogDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cronTaskLogDo) Not(conds ...gen.Condition) *cronTaskLogDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cronTaskLogDo) Or(conds ...gen.Condition) *cronTaskLogDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cronTaskLogDo) Select(conds ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cronTaskLogDo) Where(conds ...gen.Condition) *cronTaskLogDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cronTaskLogDo) Order(conds ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cronTaskLogDo) Distinct(cols ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cronTaskLogDo) Omit(cols ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cronTaskLogDo) Join(table schema.Tabler, on ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cronTaskLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cronTaskLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cronTaskLogDo) Group(cols ...field.Expr) *cronTaskLogDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cronTaskLogDo) Having(conds ...gen.Condition) *cronTaskLogDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cronTaskLogDo) Limit(limit int) *cronTaskLogDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cronTaskLogDo) Offset(offset int) *cronTaskLogDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cronTaskLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cronTaskLogDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cronTaskLogDo) Unscoped() *cronTaskLogDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cronTaskLogDo) Create(values ...*entity.CronTaskLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cronTaskLogDo) CreateInBatches(values []*entity.CronTaskLog, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cronTaskLogDo) Save(values ...*entity.CronTaskLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cronTaskLogDo) First() (*entity.CronTaskLog, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTaskLog), nil
	}
}

func (c cronTaskLogDo) Take() (*entity.CronTaskLog, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTaskLog), nil
	}
}

func (c cronTaskLogDo) Last() (*entity.CronTaskLog, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTaskLog), nil
	}
}

func (c cronTaskLogDo) Find() ([]*entity.CronTaskLog, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CronTaskLog), err
}

func (c cronTaskLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CronTaskLog, err error) {
	buf := make([]*entity.CronTaskLog, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cronTaskLogDo) FindInBatches(result *[]*entity.CronTaskLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cronTaskLogDo) Attrs(attrs ...field.AssignExpr) *cronTaskLogDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cronTaskLogDo) Assign(attrs ...field.AssignExpr) *cronTaskLogDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cronTaskLogDo) Joins(fields ...field.RelationField) *cronTaskLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cronTaskLogDo) Preload(fields ...field.RelationField) *cronTaskLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cronTaskLogDo) FirstOrInit() (*entity.CronTaskLog, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTaskLog), nil
	}
}

func (c cronTaskLogDo) FirstOrCreate() (*entity.CronTaskLog, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTaskLog), nil
	}
}

func (c cronTaskLogDo) FindByPage(offset int, limit int) (result []*entity.CronTaskLog, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cronTaskLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cronTaskLogDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cronTaskLogDo) Delete(models ...*entity.CronTaskLog) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cronTaskLogDo) withDO(do gen.Dao) *cronTaskLogDo {
	c.DO = *do.(*gen.DO)
	return c
}
