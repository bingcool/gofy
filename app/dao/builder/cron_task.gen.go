// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.
// Code generated by github.com/bingcool/gen. DO NOT EDIT.

package builder

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/bingcool/gen"
	"github.com/bingcool/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bingcool/gofy/app/entity"
)

func newCronTask(db *gorm.DB, opts ...gen.DOOption) cronTask {
	_cronTask := cronTask{}

	_cronTask.cronTaskDo.UseDB(db, opts...)
	_cronTask.cronTaskDo.UseModel(&entity.CronTask{})

	tableName := _cronTask.cronTaskDo.TableName()
	_cronTask.ALL = field.NewAsterisk(tableName)
	_cronTask.ID = field.NewInt32(tableName, "id")
	_cronTask.Name = field.NewString(tableName, "name")
	_cronTask.Expression = field.NewString(tableName, "expression")
	_cronTask.ExecScript = field.NewString(tableName, "exec_script")
	_cronTask.ExecType = field.NewInt32(tableName, "exec_type")
	_cronTask.Status = field.NewInt32(tableName, "status")
	_cronTask.WithBlockLapping = field.NewInt32(tableName, "with_block_lapping")
	_cronTask.Description = field.NewString(tableName, "description")
	_cronTask.CronBetween = field.NewField(tableName, "cron_between")
	_cronTask.CronSkip = field.NewField(tableName, "cron_skip")
	_cronTask.HTTPMethod = field.NewString(tableName, "http_method")
	_cronTask.HTTPBody = field.NewField(tableName, "http_body")
	_cronTask.HTTPHeaders = field.NewField(tableName, "http_headers")
	_cronTask.HTTPRequestTimeOut = field.NewInt32(tableName, "http_request_time_out")
	_cronTask.CreatedAt = field.NewTime(tableName, "created_at")
	_cronTask.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cronTask.DeletedAt = field.NewField(tableName, "deleted_at")

	_cronTask.fillFieldMap()

	return _cronTask
}

// cronTask 定时任务表
type cronTask struct {
	cronTaskDo cronTaskDo

	ALL                field.Asterisk
	ID                 field.Int32
	Name               field.String // 任务名称
	Expression         field.String // cron表达式
	ExecScript         field.String // 执行命令
	ExecType           field.Int32  // 执行类型 1-shell，2-http
	Status             field.Int32  // 状态 0-禁用，1-启用
	WithBlockLapping   field.Int32  // 是否阻塞执行 0-否，1->是
	Description        field.String // 描述
	CronBetween        field.Field  // 允许执行时间段
	CronSkip           field.Field  // 不允许执行时间段(即需跳过的时间段)
	HTTPMethod         field.String // http请求方法
	HTTPBody           field.Field  // http请求体
	HTTPHeaders        field.Field  // http请求头
	HTTPRequestTimeOut field.Int32  // http请求超时时间，单位：秒
	CreatedAt          field.Time   // 创建时间
	UpdatedAt          field.Time   // 修改时间
	DeletedAt          field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (c cronTask) Table(newTableName string) *cronTask {
	c.cronTaskDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cronTask) As(alias string) *cronTask {
	c.cronTaskDo.DO = *(c.cronTaskDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cronTask) updateTableName(table string) *cronTask {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Name = field.NewString(table, "name")
	c.Expression = field.NewString(table, "expression")
	c.ExecScript = field.NewString(table, "exec_script")
	c.ExecType = field.NewInt32(table, "exec_type")
	c.Status = field.NewInt32(table, "status")
	c.WithBlockLapping = field.NewInt32(table, "with_block_lapping")
	c.Description = field.NewString(table, "description")
	c.CronBetween = field.NewField(table, "cron_between")
	c.CronSkip = field.NewField(table, "cron_skip")
	c.HTTPMethod = field.NewString(table, "http_method")
	c.HTTPBody = field.NewField(table, "http_body")
	c.HTTPHeaders = field.NewField(table, "http_headers")
	c.HTTPRequestTimeOut = field.NewInt32(table, "http_request_time_out")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cronTask) WithContext(ctx context.Context) *cronTaskDo { return c.cronTaskDo.WithContext(ctx) }

func (c cronTask) TableName() string { return c.cronTaskDo.TableName() }

func (c cronTask) Alias() string { return c.cronTaskDo.Alias() }

func (c cronTask) Columns(cols ...field.Expr) gen.Columns { return c.cronTaskDo.Columns(cols...) }

func (c *cronTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cronTask) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 17)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["expression"] = c.Expression
	c.fieldMap["exec_script"] = c.ExecScript
	c.fieldMap["exec_type"] = c.ExecType
	c.fieldMap["status"] = c.Status
	c.fieldMap["with_block_lapping"] = c.WithBlockLapping
	c.fieldMap["description"] = c.Description
	c.fieldMap["cron_between"] = c.CronBetween
	c.fieldMap["cron_skip"] = c.CronSkip
	c.fieldMap["http_method"] = c.HTTPMethod
	c.fieldMap["http_body"] = c.HTTPBody
	c.fieldMap["http_headers"] = c.HTTPHeaders
	c.fieldMap["http_request_time_out"] = c.HTTPRequestTimeOut
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cronTask) clone(db *gorm.DB) cronTask {
	c.cronTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cronTask) replaceDB(db *gorm.DB) cronTask {
	c.cronTaskDo.ReplaceDB(db)
	return c
}

type cronTaskDo struct{ gen.DO }

func (c cronTaskDo) Debug() *cronTaskDo {
	return c.withDO(c.DO.Debug())
}

func (c cronTaskDo) WithContext(ctx context.Context) *cronTaskDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cronTaskDo) ReadDB() *cronTaskDo {
	return c.Clauses(dbresolver.Read)
}

func (c cronTaskDo) WriteDB() *cronTaskDo {
	return c.Clauses(dbresolver.Write)
}

func (c cronTaskDo) Session(config *gorm.Session) *cronTaskDo {
	return c.withDO(c.DO.Session(config))
}

func (c cronTaskDo) Clauses(conds ...clause.Expression) *cronTaskDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cronTaskDo) Returning(value interface{}, columns ...string) *cronTaskDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cronTaskDo) Not(conds ...gen.Condition) *cronTaskDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cronTaskDo) Or(conds ...gen.Condition) *cronTaskDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cronTaskDo) Select(conds ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cronTaskDo) Where(conds ...gen.Condition) *cronTaskDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cronTaskDo) Order(conds ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cronTaskDo) Distinct(cols ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cronTaskDo) Omit(cols ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cronTaskDo) Join(table schema.Tabler, on ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cronTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cronTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cronTaskDo) Group(cols ...field.Expr) *cronTaskDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cronTaskDo) Having(conds ...gen.Condition) *cronTaskDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cronTaskDo) Limit(limit int) *cronTaskDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cronTaskDo) Offset(offset int) *cronTaskDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cronTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cronTaskDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cronTaskDo) Unscoped() *cronTaskDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cronTaskDo) Create(values ...*entity.CronTask) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cronTaskDo) CreateInBatches(values []*entity.CronTask, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cronTaskDo) Save(values ...*entity.CronTask) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cronTaskDo) First() (*entity.CronTask, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTask), nil
	}
}

func (c cronTaskDo) Take() (*entity.CronTask, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTask), nil
	}
}

func (c cronTaskDo) Last() (*entity.CronTask, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTask), nil
	}
}

func (c cronTaskDo) Find() ([]*entity.CronTask, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CronTask), err
}

func (c cronTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CronTask, err error) {
	buf := make([]*entity.CronTask, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cronTaskDo) FindInBatches(result *[]*entity.CronTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cronTaskDo) Attrs(attrs ...field.AssignExpr) *cronTaskDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cronTaskDo) Assign(attrs ...field.AssignExpr) *cronTaskDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cronTaskDo) Joins(fields ...field.RelationField) *cronTaskDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cronTaskDo) Preload(fields ...field.RelationField) *cronTaskDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cronTaskDo) FirstOrInit() (*entity.CronTask, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTask), nil
	}
}

func (c cronTaskDo) FirstOrCreate() (*entity.CronTask, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronTask), nil
	}
}

func (c cronTaskDo) FindByPage(offset int, limit int) (result []*entity.CronTask, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cronTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cronTaskDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cronTaskDo) Delete(models ...*entity.CronTask) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cronTaskDo) withDO(do gen.Dao) *cronTaskDo {
	c.DO = *do.(*gen.DO)
	return c
}
